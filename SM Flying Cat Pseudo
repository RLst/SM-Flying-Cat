SM Flying Cat
=============

/// <summary>
/// Determining when the player starts the game, loses the game, resets the game
/// </summary>

• On effect awake
isPlaying = false;
isGameStarted = false;

• On Game start
isPlaying = true;
isGameStarted = true;

• Lost game; Next tap will reset the game
isPlaying = false;
isGameStarted = true;

Resetting the game
- Reposition player and obstacles to original position
- Reset

• After game reset
isPlaying = false;
isGameStarted = false;


/// <summary>
/// Number splitting system
/// </summary>

int score = 384;

int[] scoreSplitted;
scoreSplitted[0] = score % 10;
scoreSplitted[1] = (score / 10) % 10;
scoreSplitted[2] = (score / 100) % 10;
scoreSplitted[2] = (score / 1000) % 10;
scoreSplitted[2] = (score / 10000) % 10;

foreach (var split in scoreSplit)
{
	if (split > 0)
	{
	}
}


/// <summary>
/// Text center alignment system
/// </summary>
// 1. Get the center point
// 2. Determine character size, padding between each character
// 3. For every new character above 1, place new char at pos.x + char.width + char.padding.x = totalStringWidth
// 4. Shift entire assembly over to the right by splitLevel * totalStringWidth * -0.5


/// <summary>
/// Head segmentation centering algo + ear positioning
/// </summary>

//Head segment centralization
headOffset.pos = player.pos + offset

headSeg.parent = HeadOffset
headSeg.pos = FaceInfo().centerPosition - new Vec2(0.5f) * (headSeg.scale2d * headSeg.size) * -1f + new Vec2(offset) [if required];

//Ear positioning
ears.parent = headOffset
ears.pos = FaceInfo.Keypoints2D().pos - 0.5g *

//Scale cat ears
catEars.size = Vector2.Distance(face.chin - face.center) * fineTuneMultiplier;